{"version":3,"sources":["../src/utils/classNames.ts","../src/components/Button/Button.tsx","../src/components/Input/Input.tsx","../src/theme/ThemeProvider.tsx"],"names":["classNames","classes","clsx","Button","variant","size","fullWidth","className","children","props","base","variantStyles","sizeStyles","jsx","Input","React","label","error","hint","id","ref","inputId","jsxs","ThemeContext","createContext","ThemeProvider","initialTheme","initialDir","theme","setTheme","useState","dir","setDir","useEffect","root","value","useMemo","useTheme","ctx","useContext"],"mappings":"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","file":"index.mjs","sourcesContent":["import clsx from \"clsx\";\n\nexport function classNames(...classes: any[]) {\n  return clsx(classes);\n}\n","import React from \"react\";\nimport { classNames } from \"../../utils\";\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  fullWidth?: boolean;\n}\n\nexport const Button: React.FC<React.PropsWithChildren<ButtonProps>> = ({\n  variant = \"primary\",\n  size = \"md\",\n  fullWidth = false,\n  className,\n  children,\n  ...props\n}) => {\n  const base =\n    \"inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\";\n  const variantStyles: Record<NonNullable<ButtonProps[\"variant\"]>, string> = {\n    primary:\n      \"bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\",\n    secondary:\n      \"bg-gray-100 text-gray-900 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-100 dark:hover:bg-gray-700\",\n    ghost:\n      \"bg-transparent text-current hover:bg-gray-100 dark:hover:bg-gray-800\",\n  };\n  const sizeStyles: Record<NonNullable<ButtonProps[\"size\"]>, string> = {\n    sm: \"h-8 px-3 text-sm\",\n    md: \"h-10 px-4 text-base\",\n    lg: \"h-12 px-6 text-lg\",\n  };\n\n  return (\n    <button\n      className={classNames(\n        base,\n        variantStyles[variant],\n        sizeStyles[size],\n        fullWidth && \"w-full\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { classNames } from \"../../utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n  hint?: string;\n}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  function Input({ label, error, hint, className, id, ...props }, ref) {\n    const inputId = id || React.useId();\n    return (\n      <div className={classNames(\"flex w-full flex-col gap-1\", className)}>\n        {label && (\n          <label\n            htmlFor={inputId}\n            className=\"text-sm font-medium text-gray-700 dark:text-gray-200\"\n          >\n            {label}\n          </label>\n        )}\n        <input\n          ref={ref}\n          id={inputId}\n          className={classNames(\n            \"w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm outline-none transition focus:border-blue-500 focus:ring-2 focus:ring-blue-500/30 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-100\",\n            error && \"border-red-500 focus:border-red-500 focus:ring-red-500/30\"\n          )}\n          {...props}\n        />\n        {hint && !error && <p className=\"text-xs text-gray-500\">{hint}</p>}\n        {error && <p className=\"text-xs text-red-600\">{error}</p>}\n      </div>\n    );\n  }\n);\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\ntype ThemeMode = \"light\" | \"dark\";\ntype Direction = \"ltr\" | \"rtl\";\n\ninterface ThemeContextValue {\n  theme: ThemeMode;\n  setTheme: (t: ThemeMode) => void;\n  dir: Direction;\n  setDir: (d: Direction) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextValue | null>(null);\n\nexport const ThemeProvider: React.FC<\n  React.PropsWithChildren<{\n    initialTheme?: ThemeMode;\n    initialDir?: Direction;\n  }>\n> = ({ initialTheme = \"light\", initialDir = \"rtl\", children }) => {\n  const [theme, setTheme] = useState<ThemeMode>(initialTheme);\n  const [dir, setDir] = useState<Direction>(initialDir);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.setAttribute(\"dir\", dir);\n  }, [dir]);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") root.classList.add(\"dark\");\n    else root.classList.remove(\"dark\");\n  }, [theme]);\n\n  const value = useMemo(() => ({ theme, setTheme, dir, setDir }), [theme, dir]);\n\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const ctx = useContext(ThemeContext);\n  if (!ctx) throw new Error(\"useTheme must be used within ThemeProvider\");\n  return ctx;\n};\n"]}